syntax = "proto3";

package erda.msp.apm.exception;
option go_package = "github.com/erda-project/erda-proto-go/msp/apm/exception/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

service ExceptionService {
  rpc GetExceptions (GetExceptionsRequest) returns (GetExceptionsResponse)  {
    option (google.api.http) = {
      get: "/api/apm/exceptions",
    };
  }

  rpc GetExceptionEventIds (GetExceptionEventIdsRequest) returns (GetExceptionEventIdsResponse)  {
    option (google.api.http) = {
      get: "/api/apm/exception/eventIds",
    };
  }

  rpc GetExceptionEvent (GetExceptionEventRequest) returns (GetExceptionEventResponse)  {
    option (google.api.http) = {
      get: "/api/apm/exception/event",
    };
  }
}

message GetExceptionsRequest {
  int64 startTime = 1 [(validator.field) = {string_not_empty: true}];
  int64 endTime = 2 [(validator.field) = {string_not_empty: true}];
  string scopeId = 3 [(validator.field) = {string_not_empty: true}];
}

message GetExceptionsResponse {
  repeated Exception data = 1;
}

message GetExceptionEventIdsRequest {
  string exceptionId = 1 [(validator.field) = {string_not_empty: true}];
  string scopeId = 2 [(validator.field) = {string_not_empty: true}];
}

message GetExceptionEventIdsResponse {
  repeated string data = 1;
}

message GetExceptionEventRequest {
  string exceptionEventId = 1 [(validator.field) = {string_not_empty: true}];
  string scopeId = 2 [(validator.field) = {string_not_empty: true}];
}

message GetExceptionEventResponse {
  ExceptionEvent data = 1;
}

message Exception {
  string id = 1;
  string className = 2;
  string method = 3;
  string type = 4;
  int64 eventCount = 5;
  string exceptionMessage = 6;
  string file = 7;
  string applicationId = 8;
  string runtimeId = 9;
  string serviceName = 10;
  string scopeId = 11;
  string createTime = 12;
  string updateTime = 13;
}

message Stacks {
  map<string, google.protobuf.Value> stack = 1;
}

message ExceptionEvent {
  string id = 1;
  string exceptionId = 2;
  map<string, string> metadata = 3;
  map<string, string> requestContext = 4;
  map<string, string> requestHeaders = 5;
  string requestId = 6;
  repeated Stacks stacks = 7;
  map<string, string> tags = 8;
  int64 timestamp = 9;
  bool requestSampled = 10;
}