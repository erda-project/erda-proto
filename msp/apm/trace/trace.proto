syntax = "proto3";
package erda.msp.apm.trace;
option go_package = "github.com/erda-project/erda-proto-go/msp/apm/trace/pb";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";

service TraceService {
  rpc GetSpans (GetSpansRequest) returns (GetSpansResponse)  {
    option (google.api.http) = {
      get: "/api/apm/trace/{traceId}/spans",
    };
  }

  rpc GetTraces (GetTracesRequest) returns (GetTracesResponse)  {
    option (google.api.http) = {
      get: "/api/apm/traces",
    };
  }
}

message GetSpansRequest {
  // Each request will generate a globally unique TraceId,
  // and the TraceId is generally generated by the first server that receives the request.
  string traceId = 1 [(validator.field) = {string_not_empty: true}];
  // The scopeId is similar to the tenant id, which can quickly locate the cluster, project, and environment
  string scopeId = 2 [(validator.field) = {string_not_empty: true}];
  int64 limit = 3;
}

message GetTracesRequest {
  // The scopeId is similar to the tenant id, which can quickly locate the cluster, project, and environment
  string scopeId = 1 [(validator.field) = {string_not_empty: true}];
  int64 applicationId = 2;
  int64 status = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  int64 limit = 6;
}

message GetSpansResponse {
  repeated Span data = 1;
}

message GetTracesResponse {
  repeated Trace data = 1;
}

// Span is the basic component of a trace, a span represents an independent unit of work,
// for example, it can represent a function call, an http request, etc.
message Span {
  // Span id
  string id = 1;
  // The traceId to which the current span belongs
  string traceId = 2;
  //
  string operationName = 3;
  // Start time of span
  int64 startTime = 4;
  // End time of span
  int64 endTime = 5;
  // Parent span id
  string parentSpanId = 6;
  int64 timestamp = 7;
  // Tags store user-defined or agent defined tags in the form of K/V key-value pairs,
  // which are mainly used to query and filter link tracking results
  map<string, string> tags = 8;
}

// Trace represents a complete trace link, and trace consists of one or more spans
message Trace {
  // Trace id
  string id = 1;
  // The total time of trace
  double elapsed = 2;
  // Service name of the trace link
  repeated string services = 3;
  // Start time of trace
  int64 startTime = 4;
}